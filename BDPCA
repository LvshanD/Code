function [T,w_col,w_row] = BDPCA(corr_3d,power_pca)

num = size(corr_3d,3);
num_row = size(corr_3d,2);
num_col = size(corr_3d,1);
corr_3d_mean = mean(corr_3d,3);
corr_3d_meaned = corr_3d - corr_3d_mean;
covar_row = zeros(num_row,num_row);
covar_col = zeros(num_col,num_col);
for i = 1:num
    covar_row = (covar_row + corr_3d_meaned(:,:,i)' * corr_3d_meaned(:,:,i));
end
    covar_row = covar_row/num;
for i = 1:num
    covar_col = (covar_col + corr_3d_meaned(:,:,i)*corr_3d_meaned(:,:,i)');
end
    covar_col = covar_col/num;

[vect_row,val_row] = eig(covar_row); 
[vect_col,val_col] = eig(covar_col); 
[~,index_row] = sort(diag(val_row),'descend');
[~,index_col] = sort(diag(val_col),'descend');
vector_row = vect_row(:,index_row);
vector_col = vect_col(:,index_col);
value_row = val_row(index_row,index_row);
value_col = val_col(index_col,index_col);
sum_val_row_temp = sum(diag(val_row));
sum_val_col_temp = sum(diag(val_col));
sum_val_row = sum_val_row_temp * power_pca;
sum_val_col = sum_val_col_temp * power_pca;
sum_row_temp = 0;
sum_col_temp = 0;
for i = 1 : num_row
    sum_row_temp = sum_row_temp + value_row(i,i);
    if sum_row_temp > sum_val_row
        row = i;
        break
    end
end

for i = 1 : num_col
    sum_col_temp = sum_col_temp + value_col(i,i);
    if sum_col_temp > sum_val_col
        col = i;
        break
    end
end
T = zeros(col,row,num);
w_row = vector_row(:,1:row);
w_col = vector_col(:,1:col);
for i = 1:num
    T(:,:,i) = w_col'*corr_3d(:,:,i)*w_row;
end


